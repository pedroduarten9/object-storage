// Code generated by MockGen. DO NOT EDIT.
// Source: object-storage-gateway/internal/gateway (interfaces: MinioObject,MinioClientWrapper,Minio)

// Package gateway is a generated GoMock package.
package gateway

import (
	bytes "bytes"
	context "context"
	io "io"
	reflect "reflect"

	minio "github.com/minio/minio-go/v7"
	gomock "go.uber.org/mock/gomock"
)

// MockMinioObject is a mock of MinioObject interface.
type MockMinioObject struct {
	ctrl     *gomock.Controller
	recorder *MockMinioObjectMockRecorder
}

// MockMinioObjectMockRecorder is the mock recorder for MockMinioObject.
type MockMinioObjectMockRecorder struct {
	mock *MockMinioObject
}

// NewMockMinioObject creates a new mock instance.
func NewMockMinioObject(ctrl *gomock.Controller) *MockMinioObject {
	mock := &MockMinioObject{ctrl: ctrl}
	mock.recorder = &MockMinioObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinioObject) EXPECT() *MockMinioObjectMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockMinioObject) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockMinioObjectMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMinioObject)(nil).Read), arg0)
}

// MockMinioClientWrapper is a mock of MinioClientWrapper interface.
type MockMinioClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockMinioClientWrapperMockRecorder
}

// MockMinioClientWrapperMockRecorder is the mock recorder for MockMinioClientWrapper.
type MockMinioClientWrapperMockRecorder struct {
	mock *MockMinioClientWrapper
}

// NewMockMinioClientWrapper creates a new mock instance.
func NewMockMinioClientWrapper(ctrl *gomock.Controller) *MockMinioClientWrapper {
	mock := &MockMinioClientWrapper{ctrl: ctrl}
	mock.recorder = &MockMinioClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinioClientWrapper) EXPECT() *MockMinioClientWrapperMockRecorder {
	return m.recorder
}

// CreateBucketIfNotExists mocks base method.
func (m *MockMinioClientWrapper) CreateBucketIfNotExists(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketIfNotExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucketIfNotExists indicates an expected call of CreateBucketIfNotExists.
func (mr *MockMinioClientWrapperMockRecorder) CreateBucketIfNotExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketIfNotExists", reflect.TypeOf((*MockMinioClientWrapper)(nil).CreateBucketIfNotExists), arg0, arg1)
}

// GetObject mocks base method.
func (m *MockMinioClientWrapper) GetObject(arg0 context.Context, arg1, arg2 string, arg3 minio.GetObjectOptions) (MinioObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(MinioObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockMinioClientWrapperMockRecorder) GetObject(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockMinioClientWrapper)(nil).GetObject), arg0, arg1, arg2, arg3)
}

// PutObject mocks base method.
func (m *MockMinioClientWrapper) PutObject(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 int64, arg5 minio.PutObjectOptions) (minio.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(minio.UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockMinioClientWrapperMockRecorder) PutObject(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockMinioClientWrapper)(nil).PutObject), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockMinio is a mock of Minio interface.
type MockMinio struct {
	ctrl     *gomock.Controller
	recorder *MockMinioMockRecorder
}

// MockMinioMockRecorder is the mock recorder for MockMinio.
type MockMinioMockRecorder struct {
	mock *MockMinio
}

// NewMockMinio creates a new mock instance.
func NewMockMinio(ctrl *gomock.Controller) *MockMinio {
	mock := &MockMinio{ctrl: ctrl}
	mock.recorder = &MockMinioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinio) EXPECT() *MockMinioMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockMinio) GetObject(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockMinioMockRecorder) GetObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockMinio)(nil).GetObject), arg0, arg1)
}

// PutObject mocks base method.
func (m *MockMinio) PutObject(arg0 context.Context, arg1 string, arg2 *bytes.Reader, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObject indicates an expected call of PutObject.
func (mr *MockMinioMockRecorder) PutObject(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockMinio)(nil).PutObject), arg0, arg1, arg2, arg3)
}
